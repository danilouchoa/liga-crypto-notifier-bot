name: Label - Ready to Merge (Dependabot)

on:
  workflow_run:
    workflows: ['CI/CD - Liga Crypto Notifier Bot']
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  debug-actor:
    runs-on: ubuntu-latest
    steps:
      - name: Log do actor e evento
        run: |
          echo "Actor: ${{ github.event.workflow_run.actor }}"
          echo "Event: ${{ github.event.workflow_run.event }}"
          echo "Workflow: ${{ github.event.workflow_run.name }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Head Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Base Branch: ${{ github.event.workflow_run.base_branch }}"
          echo "Workflow Run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow Run URL: ${{ github.event.workflow_run.html_url }}"
  add-label-if-quality-check-passed:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Verificar se o job "Code Quality & Testes" foi bem-sucedido
        uses: actions/github-script@v7
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
        with:
          script: |
            const runId = process.env.WORKFLOW_RUN_ID;
            const maxAttempts = 10;
            const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

            let qualityCheckJob;
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId
              });

              qualityCheckJob = jobs.jobs.find(j => j.name === 'Code Quality & Testes');

              if (qualityCheckJob?.conclusion === 'success') {
                console.log(`✅ Job 'Code Quality & Testes' finalizado com sucesso.`);
                break;
              }

              if (attempt === maxAttempts) {
                core.setFailed('⛔ Job "Code Quality & Testes" não concluiu com sucesso após múltiplas tentativas.');
                return;
              }

              console.log(`⏳ Tentativa ${attempt}/10: aguardando finalização do job...`);
              await delay(5000);
            }
