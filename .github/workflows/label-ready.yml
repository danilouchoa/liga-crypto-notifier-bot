name: Label - Ready to Merge (Dependabot)

on:
  workflow_run:
    workflows: ['CI/CD - Liga Crypto Notifier Bot']
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  add-label-if-quality-check-passed:
    if: github.event.workflow_run.name == 'CI/CD - Liga Crypto Notifier Bot'
    runs-on: ubuntu-latest
    steps:
      - name: Verificar se o job "Code Quality & Testes" foi bem-sucedido
        uses: actions/github-script@v7
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
        with:
          script: |
            const allowedBranches = ['dependabot/', 'hotfix/', 'release/', 'bugfix/'];
            const isAllowed = allowedBranches.some(prefix => process.env.HEAD_BRANCH.startsWith(prefix));

            if (!isAllowed) {
              console.log(`Branch '${process.env.HEAD_BRANCH}' não está na lista de branches permitidas. Abortando.`);
              return;
            }


            const runId = process.env.WORKFLOW_RUN_ID;
            const maxAttempts = 10;
            const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

            let qualityCheckJob;
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId
              });

              qualityCheckJob = jobs.jobs.find(j => j.name === 'Code Quality & Testes');

              if (qualityCheckJob?.conclusion === 'success') {
                console.log(` Job 'Code Quality & Testes' finalizado com sucesso.`);
                break;
              }

              if (attempt === maxAttempts) {
                console.log('Testes falharam. Fechando PR e comentando motivo.');

                const { data: prList } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: process.env.HEAD_BRANCH
                });

                if (prList.length > 0) {
                  const prNumber = prList[0].number;
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                    state: 'closed'
                  });

                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: 'PR fechado automaticamente pois os testes não passaram no job `Code Quality & Testes`.'
                  });
                }

                return;
              }

              console.log(`Tentativa ${attempt}/10: aguardando finalização do job...`);
              await delay(5000);
            }

            const { data: prList } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: process.env.HEAD_BRANCH
            });

            if (prList.length === 0) {
              console.log(`Nenhum PR encontrado para a branch '${process.env.HEAD_BRANCH}'`);
              return;
            }

            const prNumber = prList[0].number;

            //Adiciona label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: ['ready-to-merge']
            });

            //Comenta resultado dos testes
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: ` Os testes no job \`Code Quality & Testes\` passaram com sucesso. PR pronto para merge.`
            });

            //Verifica mudanças em package.json e comenta
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const pkgChanges = files.filter(f => f.filename.includes('package.json'));
            if (pkgChanges.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `Foram detectadas mudanças em \`${pkgChanges.map(f => f.filename).join(', ')}\`. Verifique se as dependências estão seguras.`
              });
            }

            console.log(`Label aplicada e comentários inseridos no PR #${prNumber}`);
