name: Label - Ready to Merge (Dependabot)

on:
  workflow_run:
    workflows: ['CI/CD - Liga Crypto Notifier Bot']
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  add-label-if-quality-check-passed:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Verificar se o job "Code Quality & Testes" foi bem-sucedido
        uses: actions/github-script@v7
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
        with:
          script: |
            // Ignora se n√£o for branch do dependabot
            if (!process.env.HEAD_BRANCH.startsWith('dependabot/')) {
              console.log('üîÅ Branch n√£o √© do dependabot, abortando.');
              return;
            }

            const runId = process.env.WORKFLOW_RUN_ID;
            const maxAttempts = 10;
            const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

            let qualityCheckJob;
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId
              });

              qualityCheckJob = jobs.jobs.find(j => j.name === 'Code Quality & Testes');

              if (qualityCheckJob?.conclusion === 'success') {
                console.log(`‚úÖ Job 'Code Quality & Testes' finalizado com sucesso.`);
                break;
              }

              if (attempt === maxAttempts) {
                core.setFailed('‚õî Job "Code Quality & Testes" n√£o concluiu com sucesso ap√≥s m√∫ltiplas tentativas.');
                return;
              }

              console.log(`‚è≥ Tentativa ${attempt}/10: aguardando finaliza√ß√£o do job...`);
              await delay(5000);
            }

            // Procurar PR com base na branch HEAD
            const prList = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: process.env.HEAD_BRANCH
            });

            if (prList.data.length > 0) {
              const prNumber = prList.data[0].number;
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['ready-to-merge']
              });
              console.log(`üè∑Ô∏è Label 'ready-to-merge' aplicada ao PR #${prNumber}`);
            } else {
              console.log(`‚ùå Nenhum PR encontrado para a branch '${process.env.HEAD_BRANCH}'`);
            }
